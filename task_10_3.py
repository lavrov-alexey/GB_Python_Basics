"""Урок 10. Объектно-ориентированное программирование. Продвинутый уровень
3. Осуществить программу работы с органическими клетками, состоящими из ячеек.
Необходимо создать класс «Клетка». В его конструкторе инициализировать
параметр, соответствующий количеству ячеек клетки (целое число). В классе
должны быть реализованы методы перегрузки арифметических операторов:
сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
деление (__floordiv____truediv__()). Эти методы должны применяться
только к клеткам и выполнять увеличение, уменьшение, умножение и округление до
целого числа деления клеток соответственно.
Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно
равняться сумме ячеек исходных двух клеток.
Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если
разность количества ячеек двух клеток больше нуля, иначе выводить
соответствующее сообщение.
Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки —
произведение количества ячеек этих двух клеток.
Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется
как целочисленное деление количества ячеек этих двух клеток.
В классе необходимо реализовать метод make_order(), принимающий экземпляр класса
и количество ячеек в ряду. Этот метод позволяет организовать ячейки по рядам.
Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек
между \n равно переданному аргументу. Если ячеек на формирование ряда не
хватает, то в последний ряд записываются все оставшиеся.
Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5.
В этом случае метод make_order() вернёт строку: *****\n*****\n**."""

from random import randint

# диапазоны размеров клеток для случайной генерации в тестах
MIN_CELL_SIZE = 1
MAX_CELL_SIZE = 10
CELL_IN_ROW = 4


class Cell:
    def __init__(self, count_cell):
        self.count = count_cell

    def __str__(self):
        return f'{self.count} cells'

    def __add__(self, other):
        """Сложение. Объединение двух клеток. При этом число ячеек общей клетки
        будет равняться сумме ячеек исходных двух клеток."""
        return Cell(self.count + other.count)

    def __sub__(self, other):
        """Вычитание. Участвуют две клетки. Операцию выполняется, только если
        разность количества ячеек двух клеток больше нуля, иначе -
        соответствующее сообщение и => None"""
        if self.count - other.count > 0:
            return Cell(self.count - other.count)

    def __mul__(self, other):
        """Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки —
        произведение количества ячеек этих двух клеток."""
        return Cell(self.count * other.count)

    def __floordiv__(self, other):
        """Деление. Создаётся общая клетка из двух. Число ячеек общей клетки 
        определяется как целочисленное деление количества ячеек этих двух 
        клеток."""
        return Cell(self.count // other.count)

    def __truediv__(self, other):
        """Деление. Создаётся общая клетка из двух. Число ячеек общей клетки
        определяется как целочисленное деление количества ячеек этих двух
        клеток."""
        return Cell(self.count // other.count)

    def make_order(self, cell_in_row):
        """организовывает ячейки по рядам, возвращает строку вида
        *****\n*****\n*****..., где кол-во ячеек между '\n' равно переданному
        аргументу. Если ячеек на формирование ряда не хватает, то в последний
        ряд записываются все оставшиеся."""
        cnt_full_row, cnt_rem_cell = divmod(self.count, cell_in_row)
        row = "*" * CELL_IN_ROW
        result = ""
        for _ in range(cnt_full_row):
            result += row + '\n'
        return result + "*" * cnt_rem_cell


if __name__ == "__main__":
    print('Скрипт показывает результат операций над объектами класса '
          '"Клетка".\nЗначения клеток для теста генерируются случайно в '
          f'диапазоне от {MIN_CELL_SIZE} до {MAX_CELL_SIZE}.\n')

    # блок тестирования
    while True:
        cell_1 = Cell(randint(MIN_CELL_SIZE, MAX_CELL_SIZE))
        cell_2 = Cell(randint(MIN_CELL_SIZE, MAX_CELL_SIZE))
        print(f'КЛЕТКА-1 ({cell_1}) "ОПЕРАЦИЯ" КЛЕТКА-2 ({cell_2}):')
        print(f'- сумма: {cell_1 + cell_2}')
        cell_sub = cell_1 - cell_2
        print(f'- разность: {cell_sub}' if cell_sub else '- разность: НЕ '
                                                         'МОЖЕТ БЫТЬ МЕНЬШЕ 0!')
        print(f'- произведение: {cell_1 * cell_2}')
        print(f'- деление: {cell_1 / cell_2}')
        print(f'- целочисленное деление: {cell_1 // cell_2}')
        print(f'- отображение методом make_order({CELL_IN_ROW}) Клетка-1:\n'
              f'{cell_1.make_order(CELL_IN_ROW)}')
        print(f'- отображение методом make_order({CELL_IN_ROW}) Клетка-2:\n'
              f'{cell_2.make_order(CELL_IN_ROW)}')
        is_iter = input('\nТестируем на следующем наборе (любая клавиша) или '
                        'заканчиваем ("n/N")?\n')
        if is_iter.lower() == "n":
            break
