"""Урок 6. Знакомство с Python
6. Реализовать простую систему хранения данных о суммах продаж булочной. Должно
быть два скрипта с интерфейсом командной строки: для записи данных и для вывода
на экран записанных данных. При записи передавать из командной строки значение
суммы продаж. Для чтения данных реализовать в командной строке следующую логику:
● просто запуск скрипта — выводить все записи;
● запуск скрипта с одним параметром-числом — выводить все записи с номера,
равного этому числу, до конца;
● запуск скрипта с двумя числами — выводить записи, начиная с номера, равного
первому числу, по номер, равный второму числу, включительно.

Подумать, как избежать чтения всего файла при реализации второго и третьего
случаев. Данные хранить в файле bakery.csv в кодировке utf-8. Нумерация
записей начинается с 1.

Примеры запуска скриптов:
python add_sale.py 5978,5
python add_sale.py 8914,3
python add_sale.py 7879,1
python add_sale.py 1573,7
python show_sales.py
5978,5
8914,3
7879,1
1573,7
python show_sales.py 3
7879,1
1573,7
python show_sales.py 1 3
5978,5
8914,3
7879,1"""
"""7. *(вместо 6) Добавить возможность редактирования данных при помощи 
отдельного скрипта: передаём ему номер записи и новое значение. При этом файл не
должен читаться целиком — обязательное требование. Предусмотреть ситуацию, 
когда пользователь вводит номер записи, которой не существует."""
"""
exit(1) - ошибка в формате переданных параметров
exit(2) - запрошенного номера записи для редактирования нет в файле
"""

from sys import argv
from os.path import basename
from decimal import Decimal, InvalidOperation

DATA_FILE = 'bakery.csv'  # путь к файлу с данными по суммам продаж
SUM_TMPL = '+13.2f'  # шаблон хранения сумм продаж
LINE_OFFSET = 15  # длина 1й записи с суммой продаж (с учетом служ. данных)


def edit_sale(num_rec, sum_rec):
    """в файл file_rec вносит в позицию cnt_rec новую сумму продажи sum_rec"""
    with open(DATA_FILE, 'r+', encoding='utf-8') as f:
        f.seek(LINE_OFFSET * (num_rec - 1))
        old_sale = f.readline()
        if old_sale != '':
            f.seek(f.tell() - LINE_OFFSET)  # надо отмотать на 1 запись
            f.write(f"{sum_rec:{SUM_TMPL}}\n")
            print(f"Новое значение суммы продажи: {sum_rec}, "
                  f"старое: {old_sale.strip()}")
        else:
            print(f"Записи с номером {num_re1c} нет в файле данных {DATA_FILE}")
            exit(2)


def show_about():
    print('Скрипт позволяет отредактировать запись о сумме продажи, для этого '
          'ему\nв качестве параметров командной строки нужно передать (через '
          'пробел):\n'
          '1. Номер записи (целое число, запись должна существовать)\n'
          '2. Новое значение суммы продажи (вещественное число)\n\n'
          f'Например:\n>python {basename(__file__)} 5 251.50')


def valid_edit_pars(params):
    if len(params) == 3:
        # проверяем переданные параметры
        try:
            _cnt_rec = int(params[1])
        except ValueError:  # ловим не int
            return False
        try:
            _new_sum = Decimal(params[2])
        except InvalidOperation:  # ловим не decimal
            return False
        return True
    return False


if __name__ == '__main__':
    if valid_edit_pars(argv):
        idx_rec, new_sum = int(argv[1]), Decimal(argv[2])
        edit_sale(idx_rec, new_sum)
    else:
        show_about()
        exit(1)  # ошибка в формате переданных параметров
