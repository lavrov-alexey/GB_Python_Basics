"""Урок 6. Знакомство с Python
6. Реализовать простую систему хранения данных о суммах продаж булочной. Должно
быть два скрипта с интерфейсом командной строки: для записи данных и для вывода
на экран записанных данных. При записи передавать из командной строки значение
суммы продаж. Для чтения данных реализовать в командной строке следующую логику:
● просто запуск скрипта — выводить все записи;
● запуск скрипта с одним параметром-числом — выводить все записи с номера,
равного этому числу, до конца;
● запуск скрипта с двумя числами — выводить записи, начиная с номера, равного
первому числу, по номер, равный второму числу, включительно.

Подумать, как избежать чтения всего файла при реализации второго и третьего
случаев.
Данные хранить в файле bakery.csv в кодировке utf-8. Нумерация записей
начинается с 1.

Примеры запуска скриптов:
python add_sale.py 5978,5
python add_sale.py 8914,3
python add_sale.py 7879,1
python add_sale.py 1573,7
python show_sales.py
5978,5
8914,3
7879,1
1573,7
python show_sales.py 3
7879,1
1573,7
python show_sales.py 1 3
5978,5
8914,3
7879,1"""

from os.path import basename
from sys import argv
import decimal

# Шаблон для хранения сумм: 14 разрядов (13 - сумма, 1 - перенос строки)
# обязательно знак ("+" - продажи, "-" - возвраты)
# целая часть (9 разрядов)
# разделитель целой и дробной частей (1 знак)
# дробная часть (2 знака)
SUM_TEMPLATE = '+13.2f'
SUM_WHOLE_SIZE = 9  # макс. размер целой части суммы
# имя файла для хранения сумм продаж булочной
DATA_FILE = 'bakery.csv'


def show_about():
    print(f'Скрипт дописывает в конец файла {DATA_FILE} cумму продажи,\n'
          'переданную ему в виде параметра (через пробел) при вызове!\n'
          f'Целая часть суммы не должна превышать {SUM_WHOLE_SIZE} знаков!'
          f'Например: python {basename(__file__)} 2510.50')


def write_sale(sale_sum, file_name=DATA_FILE):
    with open(file_name, 'a', encoding='utf-8') as f:
        # пишем сумму в стат. формате по шаблону (со знаком и вед. пробелами)
        f.write(f"{sale_sum:{SUM_TEMPLATE}}\n")


def valid_pars(params: list):
    """Выполняет валидацию переданных в скрипт параметров и возвращает 0 -
    если все корректно или другой код, если не все хорошо"""

    cnt_params = len(params) - 1  # кол-во параметров без самого скрипта
    if cnt_params == 0:  # не передан параметр сумма продажи
        show_about()
        print("\nСумма продажи должна быть передана в качестве параметра!")
        exit(1)
    elif cnt_params == 1:
        # проверка - вещественное ли число
        try:
            _sum = decimal.Decimal(params[1])
        except decimal.InvalidOperation:
            # сумма продажи не decimal
            show_about()
            print("\nCумма продажи должна быть вещественным числом!")
            exit(2)
        # если целая часть суммы продажи больше требуемой
        if len(str(int(_sum))) > SUM_WHOLE_SIZE:
            show_about()
            print(f'\nЦелая часть суммы продажи не должна превышать '
                  f'{SUM_WHOLE_SIZE} разрядов!')
            exit(3)
        return True  # валидация прошла успешно
    else:  # если передано более 1 параметра
        show_about()
        print('\nОжидается передача только одного параметра - суммы продажи!')
        exit(4)


if __name__ == '__main__':
    if valid_pars(argv):
        sum_sale = decimal.Decimal(argv[1])
        write_sale(sum_sale)
