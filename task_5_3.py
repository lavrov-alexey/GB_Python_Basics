"""Урок 5. Знакомство с Python
3. Есть два списка:
tutors = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена']
klasses = ['9А' , '7В' , '9Б' , '9В' , '8Б' , '10А' , '10Б' , '9А']
Необходимо реализовать генератор, возвращающий кортежи вида (<tutor>, <klass>),
например: ('Иван', '9А'), ('Анастасия', '7В')
...
Количество генерируемых кортежей не должно быть больше длины списка tutors . Если в
списке klasses меньше элементов, чем в списке tutors , необходимо вывести последние
кортежи в виде: (<tutor>, None) , например: ('Станислав', None)
Доказать, что вы создали именно генератор. Проверить его работу вплоть до истощения.
Подумать, в каких ситуациях генератор даст эффект."""

TUTORS = ['Иван', 'Анастасия', 'Петр', 'Сергей', 'Дмитрий', 'Борис', 'Елена',
          'Илья', 'Иоанн']
KLASSES = ['9А', '7В', '9Б', '9В', '8Б', '10А', '10Б', '9А']


def tutor_klass_gen(tutors, klasses):
    # по ТЗ генератор должен быть не более длины tutors, поэтому - бежим по tutors
    for idx, tutor in enumerate(tutors):
        # пока длина tutors не превышает klasses, возвращаем кортеж (tutor, klass)
        # если tutors длиннее klasses, то возвращаем - (tutor, None)
        yield (tutor, klasses[idx]) if idx < len(klasses) else (tutor, None)


if __name__ == "__main__":

    tutur_klass = tutor_klass_gen(TUTORS, KLASSES)
    print(f"Тип созданой функции: {type(tutur_klass)}")
    print("1 значение генератора:", next(tutur_klass))
    print("2 значение генератора:", next(tutur_klass))
    print("Остальные значения генератора:", *tutur_klass, sep="\n")
    print("Попытка взять след. эл-т из истощенного генератора", next(tutur_klass))
