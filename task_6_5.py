"""Урок 6. Знакомство с Python
(см. task_6_3.py) 3. Есть два файла: в одном хранятся ФИО пользователей сайта,
а в другом — данные об их хобби.
Известно, что при хранении данных используется принцип: одна строка —
один пользователь, разделитель между значениями — запятая. Написать код,
загружающий данные из обоих файлов и формирующий из них словарь: ключи — ФИО,
значения — данные о хобби. Сохранить словарь в файл.
Проверить сохранённые данные. Если в файле, хранящем данные о хобби, меньше
записей, чем в файле с ФИО, задаём в словае значение None. Если наоборот —
выходим из скрипта с кодом «1».
При решении задачи считать, что объём данных в файлах во много раз
меньше объема ОЗУ.
Фрагмент файла с данными о пользователях (users.csv):
Иванов,Иван,Иванович
Петров,Петр,Петрович
Фрагмент файла с данными о хобби (hobby.csv):
скалолазание,охота
горные лыжи"""
"""(см. task_6_4.py)4. *(вместо 3) Решить задачу 3 для ситуации, когда объём 
данных в файлах превышает объём ОЗУ (разумеется, не нужно реально создавать 
такие большие файлы, это просто задел на будущее проекта). 
Только теперь не нужно создавать словарь с данными. 
Вместо этого нужно сохранить объединенные данные в новый файл (users_hobby.txt). 
Хобби пишем через двоеточие и пробел после ФИО:
Иванов,Иван,Иванович: скалолазание,охота
Петров,Петр,Петрович: горные лыжи"""
"""5. **(вместо 4) Решить задачу 4 и реализовать интерфейс командной строки, 
чтобы можно было задать имя обоих исходных файлов и имя выходного файла. 
Проверить работу скрипта."""

from sys import argv
from os.path import exists, basename

USERS_HOBBY_FILE = "users_hobby.txt"


def create_names_hobbs(f_names, f_hobbs, f_res):
    """Собирает из файлов ФИО (f_names) и хобби (f_hobbs) и пишет их
    в рез. файл (f_result) в виде 'ФИО: хобби', 1 строка - 1 запись.
    Данные из файлов не обрабатываем - пишем как есть!
    Если в хобби, меньше записей - вписываем: 'ФИО: None'.
    Если в файле с ФИО, меньше записей — выход из скрипта с кодом 1"""

    with open(f_names, 'r', encoding='utf-8') as f_names, \
            open(f_hobbs, 'r', encoding='utf-8') as f_hobbs, \
            open(f_res, 'w', encoding='utf-8') as f_result:

        while True:
            name = f_names.readline().strip()
            hobby = f_hobbs.readline().strip()
            # если есть и ФИО и хобби
            if name and hobby:
                f_result.write(f"{name}: {hobby}\n")
            elif name and not hobby:
                f_result.write(f"{name}: None\n")
            elif not name and hobby:
                print(f"Кол-во записей в файле {f_names} не должно быть "
                      f"меньше, чем кол-во записей в файле {f_hobbs}!")
                exit(1)
            else:
                break


def show_about():
    print('Скрипт из 2х CSV-файлов с ФИО пользователей и их хобби формирует '
          'txt-файл,\nсодержащий данные о ФИО и хобби в формате <ФИО: хобби> '
          '(если имя файла не будет\nуказано, то данные запишутся в файл '
          'users_hobby.txt текущей папки).\n\n'
          'Имена файлов можно:\n'
          '1. Передать в виде параметров при вызове скрипта (через пробел) -\n'
          'сначала файл с ФИО, потом файл с хобби, потом результирующий файл\n'
          '(будет создан или перезаписан, если уже есть), например:\n'
          f'>python {basename(__file__)} file_names.csv file_hobby.csv '
          'file_result.txt\n\n'
          '2. Ввести в диалоговом режиме, вызвав скрипт без параметров, '
          f'например:\n>python {basename(__file__)}\n')


def show_result(res_file: str):
    print(f"Результат работы скрипта (см. файл {res_file}):\n")
    with open(res_file, 'r', encoding='utf-8') as f:
        print(f.read())


def show_param_err():
    print('Для корректной работы скрипта нужно передать минимум - '
          '2 существующих \nфайла с исходными данными (ФИО и хобби), '
          'максимум - 3 (еще имя рез. файла)')


def cli_input(prompt):
    while True:
        file = input(prompt)
        if file == 'exit':
            exit(1)
        elif not exists(file):
            print(f'Файл <{file}> не существует!\nВведите имя существующего '
                  'файла или "exit" для выхода из скрипта')
            continue
        return file


if __name__ == '__main__':
    show_about()
    argv_cnt = len(argv) - 1  # сам скрипт не считаем

    # запуск без аргументов - диалоговый режим
    if argv_cnt == 0:
        file_names = cli_input("Введите имя файла с ФИО: ")
        file_hobbs = cli_input("Введите имя файла с хобби: ")
        file_res = input("Введите имя файла с результатами (если не задан, "
                         f"то по-умолчанию - '{USERS_HOBBY_FILE}'): ")
        if file_res == '':  # если рез. файл не задан - берем имя по-умолчанию
            file_res = USERS_HOBBY_FILE

    # имена файлов переданы в параметрах вызова
    elif 2 <= argv_cnt <= 3:
        file_names, file_hobbs = argv[1:3]
        if not exists(file_names) or not exists(file_hobbs):
            print("Файлы с входными параметрами должны существовать!")
            exit(1)
        # имя результ. файла задано или берем по-умолчанию
        file_res = argv[3] if argv_cnt == 3 else USERS_HOBBY_FILE

    # передано параметров больше, чем ожидалось
    else:
        show_param_err()
        exit(1)

    create_names_hobbs(file_names, file_hobbs, file_res)
    print("\nСкрипт завершен, результаты работы - в файле:", file_res)
    show_result(file_res)
